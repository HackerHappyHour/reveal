version: 2.1

jobs:
  build:
    docker:
      - image: circleci/node:lts-browsers
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package.json" }}
            - dependency-cache-
      - run: npm install
      - run: npm run build -- --ci=$CI
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
  release:
    docker:
      - image: circleci/node:lts
    environment:
      GIT_AUTHOR_NAME: h3
      GIT_AUTHOR_EMAIL: h3@hackerhappyhour.com
      GIT_COMMITTER_NAME: h3
      GIT_COMMITTER_EMAIL: h3@hackerhappyhour.com
    description: "semantic-release"
    parameters:
      dry-run:
        description: "semantic-release --dry-run flag"
        default: false
        type: boolean
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package.json" }}
            - dependency-cache-
      - run: npm install
      - run: |
          npx semantic-release --branch $CIRCLE_BRANCH --dry-run=<< parameters.dry-run >>
          cat RELEASE.env
      # - run: echo -e "NEW_RELEASE=true\nVERSION=1.0.1" > RELEASE.env # force publish docker images at hard-coded version
      - persist_to_workspace:
          root: ~/project
          paths:
            - RELEASE.env
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules

  publish-docker:
    docker:
      - image: circleci/buildpack-deps:stretch
    environment:
      IMAGE_NAME: hackerhappyhour/reveal
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/project
      - run:
          name: Build and publish
          command: |
            cat RELEASE.env
            source RELEASE.env # loads VERSION and NEW_RELEASE env vars in to environment
            if [ "$NEW_RELEASE" = true ]; then
              echo "Building images..."
              make build
              make build-dev
              make build-markdown
              echo "Tagging images with version: ${VERSION}..."
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:${VERSION}
              docker tag ${IMAGE_NAME}:dev ${IMAGE_NAME}:dev-${VERSION}
              docker tag ${IMAGE_NAME}:markdown ${IMAGE_NAME}:markdown-${VERSION}
              echo "Publishing images..."
              echo "${DOCKERHUB_PASS}" | docker login -u "$DOCKERHUB_USER" --password-stdin
              docker push ${IMAGE_NAME}:dev-${VERSION}
              docker push ${IMAGE_NAME}:dev
              docker push ${IMAGE_NAME}:markdown-${VERSION}
              docker push ${IMAGE_NAME}:markdown
              docker push ${IMAGE_NAME}:${VERSION}
              docker push ${IMAGE_NAME}:latest
            else
              echo "No new release detected, skipping Docker Hub publish..."
              exit 0
            fi

workflows:
  version: 2
  build-and-release:
    jobs:
      - build
      - release:
          name: release-dry-run
          requires:
            - build
          dry-run: true
          filters:
            branches:
              ignore:
                - master
      - release:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - publish-docker:
          requires:
            - release
          filters:
            branches:
              only:
                - master
