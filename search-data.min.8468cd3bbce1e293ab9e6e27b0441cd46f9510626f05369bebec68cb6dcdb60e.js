'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/reveal/instructions/','title':"Instructions",'content':" Instructions Markup Here\u0026rsquo;s a barebones example of a fully working reveal.js presentation:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/reveal.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/theme/white.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;reveal\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;slides\u0026#34;\u0026gt; \u0026lt;section\u0026gt;Slide 1\u0026lt;/section\u0026gt; \u0026lt;section\u0026gt;Slide 2\u0026lt;/section\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;js/reveal.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; Reveal.initialize(); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; The presentation markup hierarchy needs to be .reveal \u0026gt; .slides \u0026gt; section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \u0026ldquo;root\u0026rdquo; of the others (at the top), and will be included in the horizontal sequence. For example:\n\u0026lt;div class=\u0026#34;reveal\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;slides\u0026#34;\u0026gt; \u0026lt;section\u0026gt;Single Horizontal Slide\u0026lt;/section\u0026gt; \u0026lt;section\u0026gt; \u0026lt;section\u0026gt;Vertical Slide 1\u0026lt;/section\u0026gt; \u0026lt;section\u0026gt;Vertical Slide 2\u0026lt;/section\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Markdown It\u0026rsquo;s possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your \u0026lt;section\u0026gt; elements and wrap the contents in a \u0026lt;textarea data-template\u0026gt; like the example below. You\u0026rsquo;ll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file.\nThis is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown. Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks).\n\u0026lt;section data-markdown\u0026gt; \u0026lt;textarea data-template\u0026gt; ## Page title A paragraph with some text and a [link](http://hakim.se). \u0026lt;/textarea\u0026gt; \u0026lt;/section\u0026gt; External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$, a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide\u0026rsquo;s speaker notes (defaults to notes?:, so it will match both \u0026ldquo;note:\u0026rdquo; and \u0026ldquo;notes:\u0026ldquo;). The data-charset attribute is optional and specifies which charset to use when loading the external file.\nWhen used locally, this feature requires that reveal.js runs from a local web server. The following example customises all available options:\n\u0026lt;section data-markdown=\u0026#34;example.md\u0026#34; data-separator=\u0026#34;^\\n\\n\\n\u0026#34; data-separator-vertical=\u0026#34;^\\n\\n\u0026#34; data-separator-notes=\u0026#34;^Note:\u0026#34; data-charset=\u0026#34;iso-8859-15\u0026#34;\u0026gt; \u0026lt;!-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. --\u0026gt; \u0026lt;/section\u0026gt; Element Attributes Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things.\n\u0026lt;section data-markdown\u0026gt; \u0026lt;script type=\u0026#34;text/template\u0026#34;\u0026gt; - Item 1 \u0026lt;!-- .element: class=\u0026#34;fragment\u0026#34; data-fragment-index=\u0026#34;2\u0026#34; --\u0026gt; - Item 2 \u0026lt;!-- .element: class=\u0026#34;fragment\u0026#34; data-fragment-index=\u0026#34;1\u0026#34; --\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;/section\u0026gt; Slide Attributes Special syntax (through HTML comments) is available for adding attributes to the slide \u0026lt;section\u0026gt; elements generated by your Markdown.\n\u0026lt;section data-markdown\u0026gt; \u0026lt;script type=\u0026#34;text/template\u0026#34;\u0026gt; \u0026lt;!-- .slide: data-background=\u0026#34;#ff0000\u0026#34; --\u0026gt; Markdown content \u0026lt;/script\u0026gt; \u0026lt;/section\u0026gt; Configuring marked We use marked to parse Markdown. To customise marked\u0026rsquo;s rendering, you can pass in options when configuring Reveal:\nReveal.initialize({ // Options which are passed into marked \t// See https://marked.js.org/#/USING_ADVANCED.md#options \tmarkdown: { smartypants: true } });  Configuration At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below.\nReveal.initialize({ // Display presentation control arrows \tcontrols: true, // Help the user learn the controls by providing hints, for example by \t// bouncing the down arrow when they first encounter a vertical slide \tcontrolsTutorial: true, // Determines where controls appear, \u0026#34;edges\u0026#34; or \u0026#34;bottom-right\u0026#34; \tcontrolsLayout: \u0026#39;bottom-right\u0026#39;, // Visibility rule for backwards navigation arrows; \u0026#34;faded\u0026#34;, \u0026#34;hidden\u0026#34; \t// or \u0026#34;visible\u0026#34; \tcontrolsBackArrows: \u0026#39;faded\u0026#39;, // Display a presentation progress bar \tprogress: true, // Display the page number of the current slide \tslideNumber: false, // Add the current slide number to the URL hash so that reloading the \t// page/copying the URL will return you to the same slide \thash: false, // Push each slide change to the browser history. Implies `hash: true` \thistory: false, // Enable keyboard shortcuts for navigation \tkeyboard: true, // Enable the slide overview mode \toverview: true, // Vertical centering of slides \tcenter: true, // Enables touch navigation on devices with touch input \ttouch: true, // Loop the presentation \tloop: false, // Change the presentation direction to be RTL \trtl: false, // See https://github.com/hakimel/reveal.js/#navigation-mode \tnavigationMode: \u0026#39;default\u0026#39;, // Randomizes the order of slides each time the presentation loads \tshuffle: false, // Turns fragments on and off globally \tfragments: true, // Flags whether to include the current fragment in the URL, \t// so that reloading brings you to the same fragment position \tfragmentInURL: false, // Flags if the presentation is running in an embedded mode, \t// i.e. contained within a limited portion of the screen \tembedded: false, // Flags if we should show a help overlay when the questionmark \t// key is pressed \thelp: true, // Flags if speaker notes should be visible to all viewers \tshowNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) \t// - null: Media will only autoplay if data-autoplay is present \t// - true: All media will autoplay, regardless of individual setting \t// - false: No media will autoplay, regardless of individual setting \tautoPlayMedia: null, // Global override for preloading lazy-loaded iframes \t// - null: Iframes with data-src AND data-preload will be loaded when within \t// the viewDistance, iframes with only data-src will be loaded when visible \t// - true: All iframes with data-src will be loaded when within the viewDistance \t// - false: All iframes with data-src will be loaded only when visible \tpreloadIframes: null, // Number of milliseconds between automatically proceeding to the \t// next slide, disabled when set to 0, this value can be overwritten \t// by using a data-autoslide attribute on your slides \tautoSlide: 0, // Stop auto-sliding after user input \tautoSlideStoppable: true, // Use this method for navigation when auto-sliding \tautoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend \t// presenting each slide. This is used to show a pacing timer in the \t// speaker view \tdefaultTiming: 120, // Enable slide navigation via mouse wheel \tmouseWheel: false, // Hide cursor if inactive \thideInactiveCursor: true, // Time before the cursor is hidden (in ms) \thideCursorTime: 5000, // Hides the address bar on mobile devices \thideAddressBar: true, // Opens links in an iframe preview overlay \t// Add `data-preview-link` and `data-preview-link=\u0026#34;false\u0026#34;` to customise each link \t// individually \tpreviewLinks: false, // Transition style \ttransition: \u0026#39;slide\u0026#39;, // none/fade/slide/convex/concave/zoom  // Transition speed \ttransitionSpeed: \u0026#39;default\u0026#39;, // default/fast/slow  // Transition style for full page slide backgrounds \tbackgroundTransition: \u0026#39;fade\u0026#39;, // none/fade/slide/convex/concave/zoom  // Number of slides away from the current that are visible \tviewDistance: 3, // Parallax background image \tparallaxBackgroundImage: \u0026#39;\u0026#39;, // e.g. \u0026#34;\u0026#39;https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg\u0026#39;\u0026#34;  // Parallax background size \tparallaxBackgroundSize: \u0026#39;\u0026#39;, // CSS syntax, e.g. \u0026#34;2100px 900px\u0026#34;  // Number of pixels to move the parallax background per slide \t// - Calculated automatically unless specified \t// - Set to 0 to disable movement along an axis \tparallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides \tdisplay: \u0026#39;block\u0026#39; });  The configuration can be updated after initialization using the configure method:\n// Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });  Presentation Size All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport.\nSee below for a list of configuration options related to sizing, including default values:\nReveal.initialize({ // ...  // The \u0026#34;normal\u0026#34; size of the presentation, aspect ratio will be preserved \t// when the presentation is scaled to fit different resolutions. Can be \t// specified using percentage units. \twidth: 960, height: 700, // Factor of the display size that should remain empty around the content \tmargin: 0.1, // Bounds for smallest/largest possible scale to apply to content \tminScale: 0.2, maxScale: 1.5 });  If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings:\nReveal.initialize({ // ...  width: \u0026#34;100%\u0026#34;, height: \u0026#34;100%\u0026#34;, margin: 0, minScale: 1, maxScale: 1 });  Dependencies Reveal.js doesn\u0026rsquo;t rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example:\nReveal.initialize({ dependencies: [ // Interpret Markdown in \u0026lt;section\u0026gt; elements \t{ src: \u0026#39;plugin/markdown/marked.js\u0026#39;, condition: function() { return !!document.querySelector( \u0026#39;[data-markdown]\u0026#39; ); } }, { src: \u0026#39;plugin/markdown/markdown.js\u0026#39;, condition: function() { return !!document.querySelector( \u0026#39;[data-markdown]\u0026#39; ); } }, // Syntax highlight for \u0026lt;code\u0026gt; elements \t{ src: \u0026#39;plugin/highlight/highlight.js\u0026#39;, async: true }, // Zoom in and out with Alt+click \t{ src: \u0026#39;plugin/zoom-js/zoom.js\u0026#39;, async: true }, // Speaker notes \t{ src: \u0026#39;plugin/notes/notes.js\u0026#39;, async: true }, // MathJax \t{ src: \u0026#39;plugin/math/math.js\u0026#39;, async: true } ] });  You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src: Path to the script to load - async: [optional] Flags if the script should load after reveal.js has started, defaults to false - callback: [optional] Function to execute when the script has loaded - condition: [optional] Function which must return true for the script to be loaded\nReady Event A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already \u0026lsquo;ready\u0026rsquo; you can call Reveal.isReady().\nReveal.addEventListener( \u0026#39;ready\u0026#39;, function( event ) { // event.currentSlide, event.indexh, event.indexv } );  Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS.\nAuto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides:\n// Slide every five seconds Reveal.configure({ autoSlide: 5000 });  When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing »A« on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config.\nYou can also override the slide duration for individual slides and fragments by using the data-autoslide attribute:\n\u0026lt;section data-autoslide=\u0026#34;2000\u0026#34;\u0026gt; \u0026lt;p\u0026gt;After 2 seconds the first fragment will be shown.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;fragment\u0026#34; data-autoslide=\u0026#34;10000\u0026#34;\u0026gt;After 10 seconds the next fragment will be shown.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;fragment\u0026#34;\u0026gt;Now, the fragment is displayed for 2 seconds before the next slide is shown.\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight.\nWhenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.\nKeyboard Bindings If you\u0026rsquo;re unhappy with any of the default keyboard bindings you can override them using the keyboard config option:\nReveal.configure({ keyboard: { 13: \u0026#39;next\u0026#39;, // go to the next slide when the ENTER key is pressed  27: function() {}, // do something custom when ESC is pressed  32: null // don\u0026#39;t do anything when SPACE is pressed (i.e. disable a reveal.js default binding)  } });  Vertical Slide Navigation Slides can be nested within other slides to create vertical stacks (see Markup). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here\u0026rsquo;s an example showing a bird\u0026rsquo;s-eye view of what this looks like in action:\nNavigation Mode You can finetune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presnetations that use a mix of horizontal and vertical slides. The following navigation modes are available:\n   Value Description     default Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical).   linear Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical).   grid When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index.\nConsider a deck with six slides ordered in two vertical stacks:\n1.1\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.1\n1.2\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.2\n1.3\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.3\nIf you\u0026rsquo;re on slide 1.3 and navigate right, you will normally move from 1.3 -\u0026gt; 2.1. With navigationMode set to \u0026ldquo;grid\u0026rdquo; the same navigation takes you from 1.3 -\u0026gt; 2.3.    Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js.\nIf there\u0026rsquo;s some part of your content that needs to remain accessible to touch events you\u0026rsquo;ll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.\nLazy Loading When working on presentation with a lot of media or iframe content it\u0026rsquo;s important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option.\nTo enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements.\n\u0026lt;section\u0026gt; \u0026lt;img data-src=\u0026#34;image.png\u0026#34;\u0026gt; \u0026lt;iframe data-src=\u0026#34;http://hakim.se\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;video\u0026gt; \u0026lt;source data-src=\u0026#34;video.webm\u0026#34; type=\u0026#34;video/webm\u0026#34; /\u0026gt; \u0026lt;source data-src=\u0026#34;video.mp4\u0026#34; type=\u0026#34;video/mp4\u0026#34; /\u0026gt; \u0026lt;/video\u0026gt; \u0026lt;/section\u0026gt; Lazy Loading Iframes Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden.\nWhen we lazy load a video or audio element, reveal.js won\u0026rsquo;t start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background.\nYou can override this behavior with the data-preload attribute. The iframe below will be loaded according to the viewDistance.\n\u0026lt;section\u0026gt; \u0026lt;iframe data-src=\u0026#34;http://hakim.se\u0026#34; data-preload\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/section\u0026gt; You can also change the default globally with the preloadIframes configuration option. If set to true ALL iframes with a data-src attribute will be preloaded when within the viewDistance regardless of individual data-preload attributes. If set to false, all iframes will only be loaded when they become visible.\nAPI The Reveal object exposes a JavaScript API for controlling navigation and reading state:\n// Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides  // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); // Returns the top-level DOM element getRevealElement(); // \u0026lt;div class=\u0026#34;reveal\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt;  Custom Key Bindings Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option.\nReveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode );  For example\n// The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: \u0026#39;T\u0026#39;, description: \u0026#39;Start timer\u0026#39; }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } )  This allows plugins to add key bindings directly to Reveal so they can\n make use of Reveal\u0026rsquo;s pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional)  Slide Changed Event A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes.\nSome libraries, like MathJax (see #226), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback.\nReveal.addEventListener( \u0026#39;slidechanged\u0026#39;, function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );  Presentation State The presentation\u0026rsquo;s current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It\u0026rsquo;s a simple object that can easily be stringified and persisted or sent over the wire.\nReveal.slide( 1 ); // we\u0026#39;re on slide 1  var state = Reveal.getState(); Reveal.slide( 3 ); // we\u0026#39;re on slide 3  Reveal.setState( state ); // we\u0026#39;re back on slide 1  Slide States If you set data-state=\u0026quot;somestate\u0026quot; on a slide \u0026lt;section\u0026gt;, \u0026ldquo;somestate\u0026rdquo; will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide.\nFurthermore you can also listen to these changes in state via JavaScript:\nReveal.addEventListener( \u0026#39;somestate\u0026#39;, function() { // TODO: Sprinkle magic }, false );  Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your \u0026lt;section\u0026gt; elements. Four different types of backgrounds are supported: color, image, video and iframe.\nColor Backgrounds All CSS color formats are supported, including hex values, keywords, rgba() or hsl().\n\u0026lt;section data-background-color=\u0026#34;#ff0000\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Color\u0026lt;/h2\u0026gt; \u0026lt;/section\u0026gt; Image Backgrounds By default, background images are resized to cover the full page. Available options:\n   Attribute Default Description     data-background-image  URL of the image to show. GIFs restart when the slide opens.   data-background-size cover See background-size on MDN.   data-background-position center See background-position on MDN.   data-background-repeat no-repeat See background-repeat on MDN.   data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque.    \u0026lt;section data-background-image=\u0026#34;http://example.com/image.png\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Image\u0026lt;/h2\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;section data-background-image=\u0026#34;http://example.com/image.png\u0026#34; data-background-size=\u0026#34;100px\u0026#34; data-background-repeat=\u0026#34;repeat\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;This background image will be sized to 100px and repeated\u0026lt;/h2\u0026gt; \u0026lt;/section\u0026gt; Video Backgrounds Automatically plays a full size video behind the slide.\n   Attribute Default Description     data-background-video  A single video source, or a comma separated list of video sources.   data-background-video-loop false Flags if the video should play repeatedly.   data-background-video-muted false Flags if the audio should be muted.   data-background-size cover Use cover for full screen and some cropping or contain for letterboxing.   data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque.    \u0026lt;section data-background-video=\u0026#34;https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm\u0026#34; data-background-video-loop data-background-video-muted\u0026gt; \u0026lt;h2\u0026gt;Video\u0026lt;/h2\u0026gt; \u0026lt;/section\u0026gt; Iframe Backgrounds Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it\u0026rsquo;s not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute.\n\u0026lt;section data-background-iframe=\u0026#34;https://slides.com\u0026#34; data-background-interactive\u0026gt; \u0026lt;h2\u0026gt;Iframe\u0026lt;/h2\u0026gt; \u0026lt;/section\u0026gt; Background Transitions Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.\nParallax Background If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional).\nReveal.initialize({ // Parallax background image \tparallaxBackgroundImage: \u0026#39;\u0026#39;, // e.g. \u0026#34;https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg\u0026#34;  // Parallax background size \tparallaxBackgroundSize: \u0026#39;\u0026#39;, // CSS syntax, e.g. \u0026#34;2100px 900px\u0026#34; - currently only pixels are supported (don\u0026#39;t use % or auto)  // Number of pixels to move the parallax background per slide \t// - Calculated automatically unless specified \t// - Set to 0 to disable movement along an axis \tparallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 });  Make sure that the background size is much bigger than screen size to allow for some scrolling. View example.\nSlide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute:\n\u0026lt;section data-transition=\u0026#34;zoom\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;This slide will override the presentation transition and zoom!\u0026lt;/h2\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;section data-transition-speed=\u0026#34;fast\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Choose from three transition speeds: default, fast or slow!\u0026lt;/h2\u0026gt; \u0026lt;/section\u0026gt; You can also use different in and out transitions for the same slide:\n\u0026lt;section data-transition=\u0026#34;slide\u0026#34;\u0026gt; The train goes on … \u0026lt;/section\u0026gt; \u0026lt;section data-transition=\u0026#34;slide\u0026#34;\u0026gt; and on … \u0026lt;/section\u0026gt; \u0026lt;section data-transition=\u0026#34;slide-in fade-out\u0026#34;\u0026gt; and stops. \u0026lt;/section\u0026gt; \u0026lt;section data-transition=\u0026#34;fade-in slide-out\u0026#34;\u0026gt; (Passengers entering and leaving) \u0026lt;/section\u0026gt; \u0026lt;section data-transition=\u0026#34;slide\u0026#34;\u0026gt; And it starts again. \u0026lt;/section\u0026gt; You can choose from none, fade, slide, convex, concave and zoom.\nInternal links It\u0026rsquo;s easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute (\u0026lt;section id=\u0026quot;some-slide\u0026quot;\u0026gt;):\n\u0026lt;a href=\u0026#34;#/2/2\u0026#34;\u0026gt;Link\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#/some-slide\u0026#34;\u0026gt;Link\u0026lt;/a\u0026gt; You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it\u0026rsquo;s a valid navigation route based on the current slide.\n\u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;navigate-left\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;navigate-right\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;navigate-up\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;navigate-down\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;navigate-prev\u0026#34;\u0026gt; \u0026lt;!-- Previous vertical or horizontal slide --\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;navigate-next\u0026#34;\u0026gt; \u0026lt;!-- Next vertical or horizontal slide --\u0026gt; Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here\u0026rsquo;s an example: http://revealjs.com/#/fragments\nThe default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment:\n\u0026lt;section\u0026gt; \u0026lt;p class=\u0026#34;fragment grow\u0026#34;\u0026gt;grow\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;fragment shrink\u0026#34;\u0026gt;shrink\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;fragment strike\u0026#34;\u0026gt;strike\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;fragment fade-out\u0026#34;\u0026gt;fade-out\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;fragment fade-up\u0026#34;\u0026gt;fade-up (also down, left and right!)\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;fragment fade-in-then-out\u0026#34;\u0026gt;fades in, then out when we move to the next step\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;fragment fade-in-then-semi-out\u0026#34;\u0026gt;fades in, then obfuscate when we move to the next step\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;fragment highlight-current-blue\u0026#34;\u0026gt;blue only once\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;fragment highlight-red\u0026#34;\u0026gt;highlight-red\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;fragment highlight-green\u0026#34;\u0026gt;highlight-green\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;fragment highlight-blue\u0026#34;\u0026gt;highlight-blue\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second.\n\u0026lt;section\u0026gt; \u0026lt;span class=\u0026#34;fragment fade-in\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;fragment fade-out\u0026#34;\u0026gt;I\u0026#39;ll fade in, then out\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; The display order of fragments can be controlled using the data-fragment-index attribute.\n\u0026lt;section\u0026gt; \u0026lt;p class=\u0026#34;fragment\u0026#34; data-fragment-index=\u0026#34;3\u0026#34;\u0026gt;Appears last\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;fragment\u0026#34; data-fragment-index=\u0026#34;1\u0026#34;\u0026gt;Appears first\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;fragment\u0026#34; data-fragment-index=\u0026#34;2\u0026#34;\u0026gt;Appears second\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event.\nSome libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback.\nReveal.addEventListener( \u0026#39;fragmentshown\u0026#39;, function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( \u0026#39;fragmenthidden\u0026#39;, function( event ) { // event.fragment = the fragment DOM element } );  Code Syntax Highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you\u0026rsquo;ll have to load the highlight plugin (plugin/highlight/highlight.js) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css).\nReveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies \tdependencies: [ { src: \u0026#39;plugin/highlight/highlight.js\u0026#39;, async: true }, ] });  Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using \u0026lt;mark\u0026gt; to call out a line of code, add the data-noescape attribute to the \u0026lt;code\u0026gt; element.\n\u0026lt;section\u0026gt; \u0026lt;pre\u0026gt;\u0026lt;code data-trim data-noescape\u0026gt; (def lazy-fib (concat [0 1] \u0026lt;mark\u0026gt;((fn rfib [a b]\u0026lt;/mark\u0026gt; (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) \u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt; \u0026lt;/section\u0026gt; Line Numbers \u0026amp; Highlights To enable line numbers, add data-line-numbers to your \u0026lt;code\u0026gt; tags. If you want to highlight specific lines you can provide a comma separated list of line numbers using the same attribute. For example, in the following example lines 4 and 8-11 are highlighted:\n\u0026lt;pre\u0026gt;\u0026lt;code class=\u0026#34;hljs\u0026#34; data-line-numbers=\u0026#34;4,8-11\u0026#34;\u0026gt; import React, { useState } from \u0026#39;react\u0026#39;; function Example() { const [count, setCount] = useState(0); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;You clicked {count} times\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt; Click me \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } \u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt; Slide number If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values.\n// Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // \u0026#34;h.v\u0026#34;: horizontal . vertical slide number (default) // \u0026#34;h/v\u0026#34;: horizontal / vertical slide number // \u0026#34;c\u0026#34;: flattened slide number // \u0026#34;c/t\u0026#34;: flattened slide number / total slides Reveal.configure({ slideNumber: \u0026#39;c/t\u0026#39; }); // You can provide a function to fully customize the number: Reveal.configure({ slideNumber: function() { // Ignore numbering of vertical slides  return [ Reveal.getIndices().h ]; }}); // Control which views the slide number displays on using the \u0026#34;showSlideNumber\u0026#34; value: // \u0026#34;all\u0026#34;: show on all views (default) // \u0026#34;speaker\u0026#34;: only show slide numbers on speaker notes view // \u0026#34;print\u0026#34;: only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: \u0026#39;speaker\u0026#39; });  Overview mode Press »ESC« or »O« keys to toggle the overview mode on and off. While you\u0026rsquo;re in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks:\nReveal.addEventListener( \u0026#39;overviewshown\u0026#39;, function( event ) { /* ... */ } ); Reveal.addEventListener( \u0026#39;overviewhidden\u0026#39;, function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();  Fullscreen mode Just press »F« on your keyboard to show your presentation in fullscreen mode. Press the »ESC« key to exit fullscreen mode.\nEmbedded media Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown:\n\u0026lt;video data-autoplay src=\u0026#34;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay.\nNote that embedded HTML5 \u0026lt;video\u0026gt;/\u0026lt;audio\u0026gt; and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.\nEmbedded iframes reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.\nStretching elements Sometimes it\u0026rsquo;s desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below:\n\u0026lt;section\u0026gt; \u0026lt;h2\u0026gt;This video will use up the remaining space on the slide\u0026lt;/h2\u0026gt; \u0026lt;video class=\u0026#34;stretch\u0026#34; src=\u0026#34;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; \u0026lt;/section\u0026gt; Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched\nResize Event When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly.\nReveal.addEventListener( \u0026#39;resize\u0026#39;, function( event ) { // event.scale, event.oldScale, event.size } );  postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here\u0026rsquo;s an example showing how you\u0026rsquo;d make a reveal.js instance in the given window proceed to slide 2:\n\u0026lt;window\u0026gt;.postMessage( JSON.stringify({ method: \u0026#39;slide\u0026#39;, args: [ 2 ] }), \u0026#39;*\u0026#39; );  When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here\u0026rsquo;s how you subscribe to them from the parent window:\nwindow.addEventListener( \u0026#39;message\u0026#39;, function( event ) { var data = JSON.parse( event.data ); if( data.namespace === \u0026#39;reveal\u0026#39; \u0026amp;\u0026amp; data.eventName ===\u0026#39;slidechanged\u0026#39; ) { // Slide changed, see data.state for slide number \t} } );  This cross-window messaging can be toggled on or off using configuration flags.\nReveal.initialize({ // ...  // Exposes the reveal.js API through window.postMessage \tpostMessage: true, // Dispatches all reveal.js events to the parent window through postMessage \tpostMessageEvents: false }); "});index.add({'id':1,'href':'/reveal/mathjax/','title':"Mathjax",'content':" MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you\u0026rsquo;ll need to include it as a reveal.js dependency, find our more about dependencies here.\nThe plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you\u0026rsquo;ll need to download a copy of the library and adjust the mathjax configuration value.\nBelow is an example of how the plugin can be configured. If you don\u0026rsquo;t intend to change these values you do not need to include the math config object at all.\nReveal.initialize({ // other options ...  math: { mathjax: \u0026#39;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js\u0026#39;, config: \u0026#39;TeX-AMS_HTML-full\u0026#39; // See http://docs.mathjax.org/en/latest/config-files.html \t// pass other options into `MathJax.Hub.Config()` \tTeX: { Macros: macros } }, dependencies: [ { src: \u0026#39;plugin/math/math.js\u0026#39;, async: true } ] });  Read MathJax\u0026rsquo;s documentation if you need HTTPS delivery or serving of specific versions for stability.\nMathJax in Markdown If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example:\n`$$ J(\\theta_0,\\theta_1) = \\sum_{i=0} $$`  "});index.add({'id':2,'href':'/reveal/multiplexing/','title':"Multiplexing",'content':" Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/.\nThe multiplex plugin needs the following 3 things to operate:\n Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients  Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter\u0026rsquo;s) computer. (It\u0026rsquo;s safer to run the master presentation from your own computer, so if the venue\u0026rsquo;s Internet goes down it doesn\u0026rsquo;t stop the show.) An example would be to execute the following commands in the directory of your master presentation:\n npm install node-static static  If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server.\nYou can then access your master presentation at http://localhost:1947\nExample configuration:\nReveal.initialize({ // other options...  multiplex: { // Example values. To generate your own, see the socket.io server instructions. \tsecret: \u0026#39;13652805320794272084\u0026#39;, // Obtained from the socket.io server. Gives this (the master) control of the presentation \tid: \u0026#39;1ea875674b17ca76\u0026#39;, // Obtained from socket.io server \turl: \u0026#39;https://reveal-js-multiplex-ccjbegmaii.now.sh\u0026#39; // Location of socket.io server \t}, // Don\u0026#39;t forget to add the dependencies \tdependencies: [ { src: \u0026#39;//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js\u0026#39;, async: true }, { src: \u0026#39;plugin/multiplex/master.js\u0026#39;, async: true }, // and if you want speaker notes \t{ src: \u0026#39;plugin/notes-server/client.js\u0026#39;, async: true } // other dependencies... \t] });  Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html, with the configuration below causing them to connect to the socket.io server as clients.\nExample configuration:\nReveal.initialize({ // other options...  multiplex: { // Example values. To generate your own, see the socket.io server instructions. \tsecret: null, // null so the clients do not have control of the master presentation \tid: \u0026#39;1ea875674b17ca76\u0026#39;, // id, obtained from socket.io server \turl: \u0026#39;https://reveal-js-multiplex-ccjbegmaii.now.sh\u0026#39; // Location of socket.io server \t}, // Don\u0026#39;t forget to add the dependencies \tdependencies: [ { src: \u0026#39;//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js\u0026#39;, async: true }, { src: \u0026#39;plugin/multiplex/client.js\u0026#39;, async: true } // other dependencies... \t] });  Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands:\n npm install node plugin/multiplex  Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/.\nYou\u0026rsquo;ll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token, where http://example.com is the location of your socket.io server. Or if you\u0026rsquo;re going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/, visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token.\nYou are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/, but availability and stability are not guaranteed.\nFor anything mission critical I recommend you run your own server. The easiest way to do this is by installing now. With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex.\nsocket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/. (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.)\nExample configuration:\nReveal.initialize({ // other options...  multiplex: { // Example values. To generate your own, see the socket.io server instructions. \tsecret: null, // null so the clients do not have control of the master presentation \tid: \u0026#39;1ea875674b17ca76\u0026#39;, // id, obtained from socket.io server \turl: \u0026#39;example.com:80\u0026#39; // Location of your socket.io server \t}, // Don\u0026#39;t forget to add the dependencies \tdependencies: [ { src: \u0026#39;//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js\u0026#39;, async: true }, { src: \u0026#39;plugin/multiplex/client.js\u0026#39;, async: true } // other dependencies... \t]  It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don\u0026rsquo;t want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don\u0026rsquo;t want your audience to mess with your slides while you\u0026rsquo;re presenting. ;)\nExample configuration:\nReveal.initialize({ // other options...  multiplex: { // Example values. To generate your own, see the socket.io server instructions. \tsecret: \u0026#39;13652805320794272084\u0026#39;, // Obtained from the socket.io server. Gives this (the master) control of the presentation \tid: \u0026#39;1ea875674b17ca76\u0026#39;, // Obtained from socket.io server \turl: \u0026#39;example.com:80\u0026#39; // Location of your socket.io server \t}, // Don\u0026#39;t forget to add the dependencies \tdependencies: [ { src: \u0026#39;//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js\u0026#39;, async: true }, { src: \u0026#39;plugin/multiplex/master.js\u0026#39;, async: true }, { src: \u0026#39;plugin/multiplex/client.js\u0026#39;, async: true } // other dependencies... \t] }); "});index.add({'id':3,'href':'/reveal/pdf-export/','title':"Pdf Export",'content':" PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server. Here\u0026rsquo;s an example of an exported presentation that\u0026rsquo;s been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.\nSeparate pages for fragments Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally.\nIf you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false.\nPage size Export dimensions are inferred from the configured presentation size. Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page.\nPrint stylesheet To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you\u0026rsquo;re using a different HTML template, you can add this to your HEAD:\n\u0026lt;script\u0026gt; var link = document.createElement( \u0026#39;link\u0026#39; ); link.rel = \u0026#39;stylesheet\u0026#39;; link.type = \u0026#39;text/css\u0026#39;; link.href = window.location.search.match( /print-pdf/gi ) ? \u0026#39;css/print/pdf.css\u0026#39; : \u0026#39;css/print/paper.css\u0026#39;; document.getElementsByTagName( \u0026#39;head\u0026#39; )[0].appendChild( link ); \u0026lt;/script\u0026gt; Instructions  Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf.  If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf\u0026amp;showNotes=true  Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF. Change the Layout to Landscape. Change the Margins to None. Enable the Background graphics option. Click Save.  Alternatively you can use the decktape project.\n"});index.add({'id':4,'href':'/reveal/plugins/','title':"Plugins",'content':" Plugins Plugins should register themselves with reveal.js by calling Reveal.registerPlugin( 'myPluginID', MyPlugin ). Registered plugin instances can optionally expose an \u0026ldquo;init\u0026rdquo; function that reveal.js will call to initialize them.\nWhen reveal.js is booted up via Reveal.initialize(), it will go through all registered plugins and invoke their \u0026ldquo;init\u0026rdquo; methods. If the \u0026ldquo;init\u0026rdquo; method returns a Promise, reveal.js will wait for that promise to be fullfilled before finshing the startup sequence and firing the ready event. Here\u0026rsquo;s an example of a plugin that does some asynchronous work before reveal.js can proceed:\nlet MyPlugin = { init: () =\u0026gt; new Promise( resolve =\u0026gt; setTimeout( resolve, 3000 ) ) }; Reveal.registerPlugin( \u0026#39;myPlugin\u0026#39;, MyPlugin ); Reveal.addEventListener( \u0026#39;ready\u0026#39;, () =\u0026gt; console.log( \u0026#39;Three seconds later...\u0026#39; ) ); Reveal.initialize();  If the init method does not return a Promise, the plugin is considered ready right away and will not hold up the reveal.js startup sequence.\nRetrieving Plugins If you want to check if a specific plugin is registered you can use the Reveal.hasPlugin method and pass in a plugin ID, for example: Reveal.hasPlugin( 'myPlugin' ). If you want to retrieve a plugin instance you can use Reveal.getPlugin( 'myPlugin' ).\n"});index.add({'id':5,'href':'/reveal/speaker-notes/','title':"Speaker Notes",'content':" Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven\u0026rsquo;t written any notes. Press the »S« key on your keyboard to open the notes window.\nA speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it.\nNotes are defined by appending an \u0026lt;aside\u0026gt; element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown.\nAlternatively you can add your notes in a data-notes attribute on the slide. Like \u0026lt;section data-notes=\u0026quot;Something important\u0026quot;\u0026gt;\u0026lt;/section\u0026gt;.\nWhen used locally, this feature requires that reveal.js runs from a local web server.\n\u0026lt;section\u0026gt; \u0026lt;h2\u0026gt;Some Slide\u0026lt;/h2\u0026gt; \u0026lt;aside class=\u0026#34;notes\u0026#34;\u0026gt; Oh hey, these are some notes. They\u0026#39;ll be hidden in your presentation, but you can see them if you open the speaker notes window (hit »S« on your keyboard). \u0026lt;/aside\u0026gt; \u0026lt;/section\u0026gt; If you\u0026rsquo;re using the external Markdown plugin, you can add notes with the help of a special delimiter:\n\u0026lt;section data-markdown=\u0026#34;example.md\u0026#34; data-separator=\u0026#34;^\\n\\n\\n\u0026#34; data-separator-vertical=\u0026#34;^\\n\\n\u0026#34; data-separator-notes=\u0026#34;^Note:\u0026#34;\u0026gt;\u0026lt;/section\u0026gt; # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Share and Print Speaker Notes Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true. Notes will appear along the bottom of the presentations.\nWhen showNotes is enabled notes are also included when you export to PDF. By default, notes are printed in a box on top of the slide. If you\u0026rsquo;d rather print them on a separate page, after the slide, set showNotes: \u0026quot;separate-page\u0026quot;.\nSpeaker notes clock and timers The speaker notes window will also show:\n Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue).  The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide \u0026lt;section\u0026gt; by setting the data-timing attribute. Both values are in numbers of seconds.\nServer Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you\u0026rsquo;re presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies:\nReveal.initialize({ // ...  dependencies: [ { src: \u0026#39;socket.io/socket.io.js\u0026#39;, async: true }, { src: \u0026#39;plugin/notes-server/client.js\u0026#39;, async: true } ] });  Then:\n Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server  "});index.add({'id':6,'href':'/reveal/theming/','title':"Theming",'content':" Theming The framework comes with a few different themes included:\n black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js \u0026lt; 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html:\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/theme/black.css\u0026#34; id=\u0026#34;theme\u0026#34;\u0026gt; If you want to add a theme of your own see the instructions here: /css/theme/README.md.\n"});index.add({'id':7,'href':'/reveal/','title':"Introduction",'content':" reveal     A framework for easily creating beautiful web-based presentations. Check out the live demo.\n Note: This repository was forked from hakimel/reveal.js on 3/11/2019 to continue active development and feature contributions to reveal.js. This fork is published on npmjs under the @h3 scope. See CONTRIBUTING for info on how to join HackerHappyHour and contribute!\n @h3/reveal Roadmap: The goal of @h3/reveal moving forward is to make it easier to use for non-developers and developers alike by modernizing how reveal is distributed, deployed, extended, and integrated.\nOur most important goals are currently tracked in our [projects][] and [milestones][]. In particular the [v2 milestone][] looks to pull as many existing PR\u0026rsquo;s from the upstream project as possible, and bring the reveal project up to speed with modern tooling, api design, and front-end features.\nIf you have an existing Pull Request open at [hakimel/reveal.js][upstream] and would like to review the status of our review of your PR, check out the [Review Upstream Pull Requests][upstream reviews] board. Our process for reviewing pull requests from [hakimel/reveal.js][upstream] is documented in our CONTRIBUTING.md.\nreveal.js comes with a broad range of features including nested slides, Markdown contents, PDF export, speaker notes and a JavaScript API. There\u0026rsquo;s also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com.\n\n"});})();